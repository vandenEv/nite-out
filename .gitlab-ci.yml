# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  GIT_DEPTH: 1

stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:
  stage: build
  tags:
    - docker
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
  after_script:
    - rm -rf .gitlab-ci-cache  # Clean up any cache files
    - rm -rf /tmp/*  # Clear temp files

unit-test-job: # This job runs in the test stage.
  tags:
    - docker
  image: python:3.9-slim  # ✅ Changed to `slim` to avoid package issues
  variables:
    DOCKER_PULL_POLICY: "if-not-present" 
  stage: test
  before_script:
    - rm -rf /var/lib/apt/lists/*  # Free up system package cache
    - rm -rf /builds/* /tmp/*  # Clear previous builds
    - docker system prune -af 
    - python --version
    - pip install --upgrade pip
    - pip install -r backend/requirements.txt
    - export PYTHONPATH=$PYTHONPATH:/builds/sweng25_group13/sweng25_group13_pubgamenightfinder/backend  # ✅ Fixed indentation
  script:
    - pytest backend/tests/ --cov=backend/ --junitxml=report.xml
  after_script:
    - rm -rf /builds/*  
    - rm -rf /tmp/*
  coverage: '/^TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      junit: report.xml

lint-test-job: # This job also runs in the test stage.
  stage: test
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job: # This job runs in the deploy stage.
  stage: deploy
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."